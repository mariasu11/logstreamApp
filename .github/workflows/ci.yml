name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
    
    - name: Lint
      run: $(go env GOPATH)/bin/golangci-lint run ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Create fixtures directory
      run: |
        mkdir -p fixtures/logs
        echo '{"timestamp":"2025-05-13T00:15:00Z","level":"error","message":"Connection timeout","source":"server","error":"timeout after 30s"}' > fixtures/logs/test.log
    
    - name: Test
      run: go test -v ./...
    
    - name: Generate coverage report
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      continue-on-error: true
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        fail_ci_if_error: false
      continue-on-error: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build
      run: go build -v ./...
    
    - name: Create release artifact
      run: |
        GOOS=linux GOARCH=amd64 go build -o logstream-linux-amd64 ./cmd/logstream
        GOOS=darwin GOARCH=amd64 go build -o logstream-darwin-amd64 ./cmd/logstream
        GOOS=windows GOARCH=amd64 go build -o logstream-windows-amd64.exe ./cmd/logstream
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: |
          logstream-linux-amd64
          logstream-darwin-amd64
          logstream-windows-amd64.exe

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries
    
    - name: Make executable
      run: chmod +x logstream-linux-amd64
    
    - name: Create test logs
      run: |
        mkdir -p test_logs
        echo "2023-05-01 12:00:00 INFO test: Test log 1" > test_logs/test1.log
        echo "2023-05-01 12:01:00 ERROR test: Test log 2" >> test_logs/test1.log
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Start LogStream API server
      run: |
        ./logstream-linux-amd64 serve --storage disk --storage-path ./logs &
        sleep 2  # Wait for server to start
    
    - name: Collect logs
      run: |
        ./logstream-linux-amd64 collect --sources file://$(pwd)/test_logs/test1.log --storage disk --storage-path ./logs
        sleep 2  # Wait for processing
    
    - name: Query logs
      run: |
        ./logstream-linux-amd64 query --filter "Test" --storage disk --storage-path ./logs > query_results.json
        cat query_results.json
    
    - name: Verify query results
      run: |
        if ! grep -q "Test" query_results.json; then
          echo "Query results do not contain expected log entries"
          cat query_results.json
          exit 1
        fi

  deploy-terraform:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Terraform Format
      run: terraform fmt -check -recursive
      working-directory: ./terraform
      continue-on-error: true
    
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
    
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform
